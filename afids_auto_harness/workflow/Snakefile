from functools import partial
from pathlib import Path
import random

from snakebids import bids, generate_inputs


configfile: "config/config.yaml"


wildcard_constraints:
    acq="[a-zA-Z\d]+",
    run="[a-zA-Z\d]+",
    subject="[a-zA-Z\d]+",
    session="[a-zA-Z\d]+",
    task="[a-zA-Z\d]+",


INPUT_DS_LABELS = ["hcp", "oasis"]

t1w_inputs = partial(
    generate_inputs, pybids_inputs=config["pybids_inputs"], use_bids_inputs=True
)
afids_inputs = partial(
    generate_inputs, pybids_inputs=config["afids_inputs"], use_bids_inputs=True
)

inputs = {
    input_ds: {
        "afids": afids_inputs(
            bids_dir=Path(config[f"{input_ds}_dir"])
            / "derivatives"
            / "afids_groundtruth"
        ),
        "t1w": t1w_inputs(bids_dir=config[f"{input_ds}_dir"]),
    }
    for input_ds in INPUT_DS_LABELS
}


rule write_config:
    params:
        patchsize="    patch: {patchsize}",
        ntrees="    ntrees: {ntrees}",
        treedepth="    treedepth: {treedepth}",
        usexyz="    usexyz: {usexyz}",
        spheresize="    sphere_size: {spheresize}",
    output:
        configfile="output/config/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}_config.yml",
    shell:
        'echo "c3d:" > {output} && '
        'echo "  model_params:" >> {output} && '
        'echo "{params.patchsize}" >> {output} && '
        'echo "{params.ntrees}" >> {output} && '
        'echo "{params.treedepth}" >> {output} && '
        'echo "{params.usexyz}" >> {output} && '
        'echo "  landmarks:" >> {output} && '
        'echo "{params.spheresize}" >> {output}'


rule train_model:
    input:
        expand(
            inputs["oasis"]["t1w"]["t1w"].input_path,
            zip,
            **inputs["oasis"]["t1w"]["t1w"].input_zip_lists,
        ),
        configfile=rules.write_config.output.configfile,
    output:
        model=bids(
            root="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/auto-afids-train",
            suffix="model.rf",
            space="MNI152NLin2009cAsym",
        ),
    params:
        input_dir=config["oasis_dir"],
        model_dir="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
    container:
        config["containers"]["afids_auto_train"]
    shell:
        "/opt/afids-auto-train/run.py {params.input_dir} {params.model_dir} participant --cores --force-output --configfile {input.configfile}"


rule apply_model:
    input:
        testing_data=expand(
            inputs["hcp"]["t1w"]["t1w"].input_path,
            zip,
            **inputs["hcp"]["t1w"]["t1w"].input_zip_lists,
        ),
        model=rules.train_model.output["model"],
    params:
        model_dir="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
        test_dir=config["hcp_dir"],
        out_dir="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
    output:
        out_fcsvs=expand(
            bids(
                root="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/threshold_prob",
                datatype="anat",
                space="MNI152NLin2009cAsym",
                suffix="afids.fcsv",
                **inputs["hcp"]["t1w"]["t1w"].input_wildcards,
            ),
            zip,
            **inputs["hcp"]["t1w"]["t1w"].input_zip_lists,
            allow_missing=True,
        ),
    container:
        config["containers"]["afids_auto_apply"]
    resources:
        cores=workflow.cores,
    shell:
        "/opt/afids-auto-apply/run.py --force-output {params.test_dir} {params.out_dir} participant --model_dir {params.model_dir} --cores {resources.cores}"


rule afle:
    input:
        ground_truth_fcsv=bids(
            root=str(Path(config["hcp_dir"]) / "derivatives" / "afids_groundtruth"),
            desc="groundtruth",
            suffix="afids.fcsv",
            space="T1w",
            **inputs["hcp"]["afids"]["afids"].input_wildcards,
        ),
        model_fcsv=bids(
            root="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/threshold_prob",
            datatype="anat",
            space="MNI152NLin2009cAsym",
            suffix="afids.fcsv",
            **inputs["hcp"]["t1w"]["t1w"].input_wildcards
        ),
    output:
        afle=bids(
            root=str(
                Path("output")
                / "afles"
                / "patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}"
            ),
            datatype="anat",
            suffix="afles.json",
            **inputs["hcp"]["t1w"]["t1w"].input_wildcards,
        ),
    script:
        "scripts/calc_afle.py"


def aggregate_all_inputs(wildcards):
    return expand(
        expand(
            rules.afle.output["afle"],
            patchsize=config["patch_size"],
            ntrees=config["ntrees"],
            treedepth=config["treedepth"],
            usexyz=config["usexyz"],
            spheresize=config["spheresize"],
            allow_missing=True,
        ),
        zip,
        **inputs["hcp"]["t1w"]["t1w"].input_zip_lists
    )


rule all:
    input:
        aggregate_all_inputs,
    default_target: True
