from functools import partial
from pathlib import Path
import random

from snakebids import bids, generate_inputs, filter_list


configfile: "config/config.yaml"


wildcard_constraints:
    acq="[a-zA-Z\d]+",
    run="[a-zA-Z\d]+",
    subject="[a-zA-Z\d]+",
    session="[a-zA-Z\d]+",
    task="[a-zA-Z\d]+",


INPUT_DS_LABELS = ["hcp", "oasis"]

t1w_inputs = partial(
    generate_inputs, pybids_inputs=config["pybids_inputs"], use_bids_inputs=True
)
afids_inputs = partial(
    generate_inputs, pybids_inputs=config["afids_inputs"], use_bids_inputs=True
)

inputs = {
    "afids": afids_inputs(
        bids_dir=Path(config["lhscpd_dir"]) / "derivatives" / "afids_groundtruth"
    ),
    "t1w": t1w_inputs(bids_dir=config["lhscpd_dir"]),
}


localrules:
    write_config,


rule write_config:
    params:
        patchsize="    patch: {patchsize}",
        ntrees="    ntrees: {ntrees}",
        treedepth="    treedepth: {treedepth}",
        usexyz="    usexyz: {usexyz}",
        spheresize="    sphere_size: {spheresize}",
    output:
        configfile="output/config/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}_config.yml",
    shell:
        'echo "c3d:" > {output} && '
        'echo "  model_params:" >> {output} && '
        'echo "{params.patchsize}" >> {output} && '
        'echo "{params.ntrees}" >> {output} && '
        'echo "{params.treedepth}" >> {output} && '
        'echo "{params.usexyz}" >> {output} && '
        'echo "  landmarks:" >> {output} && '
        'echo "{params.spheresize}" >> {output}'


localrules:
    copy_subject,


rule copy_subject:
    input:
        t1w=inputs["t1w"]["t1w"].input_path,
        afids=inputs["afids"]["afids"].input_path,
    output:
        t1w=bids(
            root="output/{cohort}",
            suffix="T1w.nii.gz",
            datatype="anat",
            **inputs["t1w"]["t1w"].input_wildcards
        ),
        afids=bids(
            root="output/{cohort}/derivatives/afids_groundtruth",
            suffix="afids.fcsv",
            space="T1w",
            desc="groundtruth",
            **inputs["afids"]["afids"].input_wildcards
        ),
    shell:
        "cp {input.t1w} {output.t1w} && "
        "cp {input.afids} {output.afids}"


localrules:
    copy_train,


rule copy_train:
    input:
        t1w=expand(
            expand(rules.copy_subject.output.t1w, cohort="train", allow_missing=True),
            zip,
            **filter_list(
                inputs["t1w"]["t1w"].input_zip_lists,
                {"subject": config["train_subjects"]},
            ),
        ),
        afids=expand(
            expand(
                rules.copy_subject.output.afids, cohort="train", allow_missing=True
            ),
            zip,
            **filter_list(
                inputs["afids"]["afids"].input_zip_lists,
                {"subject": config["train_subjects"]},
            )
        ),


localrules:
    copy_test,


rule copy_test:
    input:
        t1w=expand(
            expand(rules.copy_subject.output.t1w, cohort="test", allow_missing=True),
            zip,
            **filter_list(
                inputs["t1w"]["t1w"].input_zip_lists,
                {"subject": config["test_subjects"]},
            ),
        ),
        afids=expand(
            expand(rules.copy_subject.output.afids, cohort="test", allow_missing=True),
            zip,
            **filter_list(
                inputs["afids"]["afids"].input_zip_lists,
                {"subject": config["test_subjects"]},
            )
        ),


rule train_model:
    input:
        rules.copy_train.input.t1w,
        configfile=rules.write_config.output.configfile,
    output:
        model=bids(
            root="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/auto-afids-train",
            suffix="model.rf",
            space="MNI152NLin2009cAsym",
        ),
    params:
        input_dir="output/train",
        model_dir="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
    resources:
        mem_mb=64000,
        time=179,
    threads: 1
    container:
        config["containers"]["afids_auto_train"]
    shell:
        "/opt/afids-auto-train/run.py {params.input_dir} {params.model_dir} participant --cores --force-output --configfile {input.configfile}"


rule apply_model:
    input:
        testing_data=rules.copy_test.input.t1w,
        model=rules.train_model.output["model"],
    params:
        model_dir="output/models/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
        test_dir="output/test",
        out_dir="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}",
    output:
        out_fcsvs=expand(
            bids(
                root="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/threshold_prob",
                datatype="anat",
                space="MNI152NLin2009cAsym",
                suffix="afids.fcsv",
                **inputs["t1w"]["t1w"].input_wildcards,
            ),
            zip,
            **filter_list(
                inputs["t1w"]["t1w"].input_zip_lists,
                {"subject": config["test_subjects"]},
            ),
            allow_missing=True,
        ),
    container:
        config["containers"]["afids_auto_apply"]
    resources:
        mem_mb=64000,
        time=1439,
    threads: 1
    shell:
        "/opt/afids-auto-apply/run.py {params.test_dir} {params.out_dir} participant --model_dir {params.model_dir} --cores {threads} --force-output"


localrules:
    afle,


rule afle:
    input:
        ground_truth_fcsv=bids(
            root=str(Path("output/test") / "derivatives" / "afids_groundtruth"),
            desc="groundtruth",
            suffix="afids.fcsv",
            space="T1w",
            **inputs["afids"]["afids"].input_wildcards,
        ),
        model_fcsv=bids(
            root="output/afids/patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}/threshold_prob",
            datatype="anat",
            space="MNI152NLin2009cAsym",
            suffix="afids.fcsv",
            **inputs["t1w"]["t1w"].input_wildcards
        ),
    output:
        afle=bids(
            root=str(
                Path("output")
                / "afles"
                / "patchsize-{patchsize}_ntrees-{ntrees}_treedepth-{treedepth}_usexyz-{usexyz}_spheresize-{spheresize}"
            ),
            datatype="anat",
            suffix="afles.json",
            **inputs["t1w"]["t1w"].input_wildcards,
        ),
    script:
        "scripts/calc_afle.py"


def aggregate_all_inputs(wildcards):
    return expand(
        expand(
            rules.afle.output["afle"],
            patchsize=config["patch_size"],
            ntrees=config["ntrees"],
            treedepth=config["treedepth"],
            usexyz=config["usexyz"],
            spheresize=config["spheresize"],
            allow_missing=True,
        ),
        zip,
        **filter_list(
            inputs["t1w"]["t1w"].input_zip_lists, {"subject": config["test_subjects"]}
        ),
    )


localrules:
    all,


rule all:
    input:
        aggregate_all_inputs,
    default_target: True
